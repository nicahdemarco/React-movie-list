{"version":3,"sources":["components/ratingFilterComponent/index.tsx","components/loadingComponent/index.tsx","components/movieDetailComponent/index.tsx","components/movieCardComponent/index.tsx","components/discoverComponent/index.tsx","fetchService/fetchService.tsx","components/searchComponent/index.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["RatingFilterComp","movieResults","filterAction","ratingState","className","count","value","size","color2","half","onChange","newRating","LoadingComponent","message","MovieDetailComp","modalState","setModalState","title","overview","getPosterPath","poster_path","release","fallback","onClick","icon","style","backgroundImage","split","MovieCardComp","num","movie","useState","movies","isPosterFound","path","fullURL","popularity","toFixed","vote_average","release_date","DiscoverComp","filteredMovies","searchResponseState","setRatingState","filter","indexOf","newState","map","movieItem","key","starsState","length","errorParse","err","console","log","SearchComp","setSearchResponseState","inputValue","setInputValue","MOVIE_QUERY","encodeURI","handleInputChange","API_KEY","ENCODED_QUERY","URL_REQUEST","fetch","then","movieDbRes","json","catch","getUserInput","response","results","name","type","placeholder","onKeyPress","e","target","library","add","fab","faArrowRight","faFireAlt","faSearch","faStar","faTimes","App","appState","setAppState","useEffect","getMovies","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8dd543f2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactStars from 'react-stars'\r\nimport { IMovieCard } from \"../movieCardComponent\";\r\nimport \"./ratingFilterComp.css\";\r\n\r\nexport const RatingFilterComp = ({ movieResults, filterAction, ratingState }: { movieResults: IMovieCard[], filterAction: (n: number) => void, ratingState: number }): JSX.Element => {\r\n\r\n\tconst ratingChanged = (newRating: number) => {\r\n\t\tif (ratingState === newRating) {\r\n\t\t\tfilterAction(0);\r\n\t\t} else {\r\n\t\t\tfilterAction(newRating);\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"rate-container\">\r\n\t\t\t\t<h3 className=\"rate-text\"> Filter by rating</h3>\r\n\t\t\t\t< ReactStars\r\n\t\t\t\t\tclassName={'stars-container'}\r\n\t\t\t\t\tcount={5 | 0}\r\n\t\t\t\t\tvalue={ratingState ? ratingState : 0}\r\n\t\t\t\t\tsize={32}\r\n\t\t\t\t\tcolor2={'#ffd700'}\r\n\t\t\t\t\thalf={false}\r\n\t\t\t\t\tonChange={ratingChanged}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n","import React from \"react\";\r\nimport \"./loadingComp.css\";\r\n\r\nexport const LoadingComponent = ({ message }: any): JSX.Element => {\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"loading-container\">\r\n\t\t\t\t<span className=\"loading-logo\"> {message} </span>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n\r\n};\r\n","import React, { Suspense } from \"react\";\r\nimport { LoadingComponent } from \"../loadingComponent\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nimport \"./movieDetailComp.css\";\r\n\r\nexport const MovieDetailComp = ({\r\n\tmodalState,\r\n\tsetModalState,\r\n\ttitle,\r\n\toverview,\r\n\tgetPosterPath,\r\n\tposter_path,\r\n\trelease\r\n}: {\r\n\tmodalState: boolean,\r\n\tsetModalState: (bol: boolean) => void,\r\n\tgetPosterPath: (str: string) => string,\r\n\ttitle: string,\r\n\toverview: string,\r\n\tposter_path: string,\r\n\trelease: string\r\n}): JSX.Element => {\r\n\r\n\tconst setBackgroundClassName = (): string => {\r\n\t\treturn !poster_path ? 'card__background poster-not-found' : 'card__background';\r\n\t}\r\n\r\n\r\n\treturn modalState === null ? (\r\n\t\t<>\r\n\t\t\t<div className=\"discover-comp\">\r\n\t\t\t\t<Suspense fallback={<LoadingComponent />}></Suspense>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t) : (\r\n\t\t<>\r\n\t\t\t<div className=\"modal-wrapper\">\r\n\t\t\t\t<div className='modal-container'>\r\n\t\t\t\t\t<button className=\"modal__close-button \"\r\n\t\t\t\t\t\tonClick={() => setModalState(false)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<FontAwesomeIcon className=\"icon\" icon=\"times\" />\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<div className=\"modal__scroll-area\">\r\n\t\t\t\t\t\t<header className='modal-header'>\r\n\t\t\t\t\t\t\t<div className={setBackgroundClassName()} style={{ backgroundImage: getPosterPath(poster_path) }}></div>\r\n\t\t\t\t\t\t\t<h2 className='modal-title'>\r\n\t\t\t\t\t\t\t\t{title}\r\n\t\t\t\t\t\t\t</h2>\r\n\t\t\t\t\t\t\t<h4>\r\n\t\t\t\t\t\t\t\t({release.split('', 4)})\r\n\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t</header>\r\n\t\t\t\t\t\t<main className='modal-body modal__content'>\r\n\t\t\t\t\t\t\t<p> {overview} </p>\r\n\t\t\t\t\t\t</main>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { MovieDetailComp } from \"../movieDetailComponent\";\r\nimport \"./movieCardComp.css\";\r\n\r\nexport interface IMovieCard {\r\n\tid: number;\r\n\ttitle: string;\r\n\tpopularity: number;\r\n\tposter_path: string;\r\n\tvote_average?: number;\r\n\toverview?: string;\r\n\trelease_date?: string;\r\n}\r\n\r\ntype MovieCardType = { movie: IMovieCard, searchResponseState?: IMovieCard[] }\r\n\r\nexport const MovieCardComp = ({ movie }: MovieCardType): JSX.Element => {\r\n\tconst [modalState, setModalState] = useState<boolean>(false);\r\n\tconst movies = movie;\r\n\tconst isPosterFound: boolean = !!movies.poster_path;\r\n\r\n\tconst openCloseModal = () => {\r\n\t\tsetModalState(!modalState);\r\n\t}\r\n\r\n\tconst getPosterPath = (path: string): string => {\r\n\t\tconst URL = 'https://image.tmdb.org/t/p/w500';\r\n\t\tlet fullURL = ''\r\n\r\n\t\tif (path !== null) fullURL = `url(${URL}${path})`\r\n\r\n\t\treturn fullURL;\r\n\t};\r\n\r\n\tconst setBackgroundClassName = (): string => {\r\n\t\treturn !isPosterFound ? 'poster poster-not-found' : 'poster';\r\n\t}\r\n\r\n\tconst toPercentage = (num: number): string => {\r\n\t\tlet numberTofix = ((num * 10) / 1000);\r\n\r\n\t\treturn `${numberTofix.toFixed(1)}%`;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"align-items-center\">\r\n\t\t\t\t{\r\n\r\n\t\t\t\t\t<div className=\"justify-content-space-between movie-container\">\r\n\t\t\t\t\t\t<div className={setBackgroundClassName()} style={{ backgroundImage: getPosterPath(movies.poster_path) }}>\r\n\t\t\t\t\t\t\t<div className=\"poster-data\" onClick={() => openCloseModal()}>\r\n\t\t\t\t\t\t\t\t<p >{movies.title}</p>\r\n\t\t\t\t\t\t\t\t<p>Popularity: {toPercentage(movies.popularity)}</p>\r\n\t\t\t\t\t\t\t\t<p>Votes: {movies.vote_average}</p>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t{modalState &&\r\n\t\t\t\t\t\t\t\t\t<MovieDetailComp\r\n\t\t\t\t\t\t\t\t\t\tmodalState={modalState}\r\n\t\t\t\t\t\t\t\t\t\tsetModalState={setModalState}\r\n\t\t\t\t\t\t\t\t\t\ttitle={movies.title}\r\n\t\t\t\t\t\t\t\t\t\tgetPosterPath={getPosterPath}\r\n\t\t\t\t\t\t\t\t\t\tposter_path={movies.poster_path}\r\n\t\t\t\t\t\t\t\t\t\toverview={movies.overview ? movies.overview : 'No overview for this title'}\r\n\t\t\t\t\t\t\t\t\t\trelease={movies.release_date ? movies.release_date : 'No date for this title'}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};","import React, { useState, Suspense } from \"react\";\r\nimport { RatingFilterComp } from \"../ratingFilterComponent\";\r\nimport { MovieCardComp } from \"../movieCardComponent\";\r\nimport { IMovieCard } from \"../movieCardComponent\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { LoadingComponent } from \"../loadingComponent\";\r\nimport \"./discoverComp.css\";\r\n\r\nexport const DiscoverComp = ({ movieResults, searchResponseState }: { movieResults: IMovieCard[], searchResponseState: IMovieCard[] }): JSX.Element => {\r\n\tconst [ratingState, setRatingState] = useState<number>(0);\r\n\r\n\tlet filteredMovies: IMovieCard[];\r\n\r\n\tfilteredMovies = movieResults && movieResults.filter((movie: IMovieCard) => {\r\n\t\tif (movieResults.indexOf(movie) < 5) {\r\n\t\t\treturn movie;\r\n\t\t}\r\n\t\treturn filteredMovies;\r\n\t});\r\n\r\n\tconst filterAction = (newState: number): void => {\r\n\t\tsetRatingState(newState)\r\n\t};\r\n\r\n\treturn movieResults === null ? (\r\n\t\t<>\r\n\t\t\t<div className=\"discover-comp\">\r\n\t\t\t\t<Suspense fallback={<LoadingComponent message={'Loading movies'} />}></Suspense>\r\n\t\t\t</div>\r\n\t\t</>\r\n\r\n\t) : (\r\n\t\t<>\r\n\t\t\t<div className=\"discover-comp\">\r\n\r\n\t\t\t\t<div className='title-container' >\r\n\t\t\t\t\t<h3 className='title'\r\n\t\t\t\t\t// onClick={() => getMovies(API_KEY)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<FontAwesomeIcon icon=\"fire-alt\" />Popular Movies</h3>\r\n\t\t\t\t\t<RatingFilterComp\r\n\t\t\t\t\t\tmovieResults={movieResults}\r\n\t\t\t\t\t\tfilterAction={filterAction}\r\n\t\t\t\t\t\tratingState={ratingState}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* Filter by rating list */}\r\n\t\t\t\t<Suspense fallback={<LoadingComponent message={'Loading movies'} />}>\r\n\t\t\t\t\t<div className='card-container'>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tratingState !== 0 ?\r\n\t\t\t\t\t\t\t\tmovieResults.map((movieItem, key) => {\r\n\t\t\t\t\t\t\t\t\tconst starsState = ratingState * 2;\r\n\r\n\t\t\t\t\t\t\t\t\tif (movieItem.vote_average && movieItem.vote_average <= starsState) {\r\n\t\t\t\t\t\t\t\t\t\treturn < MovieCardComp\r\n\t\t\t\t\t\t\t\t\t\t\tmovie={movieItem}\r\n\t\t\t\t\t\t\t\t\t\t\tkey={key}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t: null\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Suspense>\r\n\r\n\t\t\t\t{/* Popular movie list */}\r\n\t\t\t\t<Suspense fallback={<LoadingComponent message={'Loading movies'} />}>\r\n\t\t\t\t\t<div className='card-container'>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tratingState === 0 && !searchResponseState.length ?\r\n\t\t\t\t\t\t\t\tfilteredMovies && filteredMovies.map((movie, key) => {\r\n\t\t\t\t\t\t\t\t\treturn <MovieCardComp movie={movie} key={key} />\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t: null\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Suspense>\r\n\r\n\t\t\t\t{/* Search result movie list */}\r\n\t\t\t\t<Suspense fallback={<LoadingComponent message={'searching movies'} />}>\r\n\t\t\t\t\t<div className='card-container'>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsearchResponseState.length > 0 ?\r\n\t\t\t\t\t\t\t\tsearchResponseState.map((movie: any, key: any) => {\r\n\t\t\t\t\t\t\t\t\treturn <MovieCardComp movie={movie} key={key} />\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t: ''\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Suspense>\r\n\t\t\t</div >\r\n\t\t</>\r\n\t);\r\n};","import { IRawMovies } from \"../App\";\r\n\r\nexport const getMovies = (API_KEY: string): Promise<IRawMovies> => {\r\n    const URL_REQUEST = `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`;\r\n\r\n    return fetch(URL_REQUEST)\r\n        .then((movieDbRes: Response) => movieDbRes.json())\r\n        .catch((err: Error) => {\r\n            return errorParse(err);\r\n        });\r\n};\r\n\r\nexport const getUserInput = (API_KEY: string, ENCODED_QUERY: string): Promise<IRawMovies> => {\r\n    const URL_REQUEST = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${ENCODED_QUERY}&language=en-US&page=1&include_adult=false`;\r\n\r\n    return fetch(URL_REQUEST)\r\n        .then((movieDbRes: Response) => movieDbRes.json())\r\n        .catch((err: Error) => {\r\n            return errorParse(err);\r\n        });\r\n}\r\n\r\n//TODO: convert to fn to manage backend errors\r\nconst errorParse = (err: Error) => {\r\n    console.log(`ERROR: ${err.message}`);\r\n    return `<div> Something went wrong, ${err.message}. Please try again later...</div>`;\r\n};","import React, { useState } from \"react\";\r\nimport \"./searchComp.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { getUserInput } from '../../fetchService/fetchService';\r\nimport { IMovieCard } from \"../movieCardComponent\";\r\n\r\ntype SearchCompType = { setSearchResponseState: (param: IMovieCard[]) => void };\r\n\r\nexport const SearchComp = ({ setSearchResponseState }: SearchCompType): JSX.Element => {\r\n\tconst [inputValue, setInputValue] = useState<string>('');\r\n\r\n\tconst API_KEY = \"66e6c4190fa8095b70e61bda4702a19f\";\r\n\tconst MOVIE_QUERY = encodeURI(inputValue);\r\n\r\n\tconst errorParse = (err: Error) => {\r\n\t\tconsole.log(`ERROR: ${err.message}`);\r\n\t\treturn <div> Something went wrong, ${err.message}. Please try again later...</div>;\r\n\t};\r\n\r\n\tlet handleInputChange = (): void => {\r\n\t\tgetUserInput(API_KEY, MOVIE_QUERY)\r\n\t\t\t.then((response) => setSearchResponseState(response.results))\r\n\t\t\t.catch((err) => errorParse(err));\r\n\t};\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"search-comp\">\r\n\t\t\t\t<FontAwesomeIcon className=\"search-icon\" icon=\"search\" />\r\n\t\t\t\t<input\r\n\t\t\t\t\tname='searchValue'\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tplaceholder=\"Search for a movie...\"\r\n\t\t\t\t\tvalue={inputValue}\r\n\t\t\t\t\tonKeyPress={(e) => e.key === 'Enter' && handleInputChange()}\r\n\t\t\t\t\tonChange={(e) => setInputValue(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t{\r\n\t\t\t\t\tinputValue ?\r\n\t\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\t\tclassName=\"clear-icon\"\r\n\t\t\t\t\t\t\ticon=\"times\"\r\n\t\t\t\t\t\t\tonClick={() => setInputValue('')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t: null\r\n\t\t\t\t}\r\n\t\t\t</div >\r\n\t\t</>\r\n\t);\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { DiscoverComp } from \"./components/discoverComponent\";\r\nimport { IMovieCard } from \"./components/movieCardComponent\";\r\nimport { SearchComp } from \"./components/searchComponent\";\r\nimport { LoadingComponent } from \"./components/loadingComponent\";\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { fab } from '@fortawesome/free-brands-svg-icons';\r\nimport { faArrowRight, faFireAlt, faSearch, faStar, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { getMovies } from './fetchService/fetchService';\r\n\r\nlibrary.add(fab, faArrowRight, faFireAlt, faSearch, faStar, faTimes)\r\nexport interface IRawMovies {\r\n\tresults: IMovieCard[];\r\n\tfilterAction?: (n: number) => void;\r\n\tratingState?: number | undefined;\r\n}\r\n\r\nfunction App() {\r\n\tconst [appState, setAppState] = useState<IRawMovies>();\r\n\tconst [searchResponseState, setSearchResponseState] = useState<IMovieCard[]>([]);\r\n\r\n\tconst API_KEY = \"66e6c4190fa8095b70e61bda4702a19f\";\r\n\r\n\tconst errorParse = (err: Error) => {\r\n\t\tconsole.log(`ERROR: ${err.message}`);\r\n\t\treturn <div> Something went wrong, ${err.message}. Please try again later...</div>;\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\t!appState && getMovies(API_KEY)\r\n\t\t\t.then((data) => setAppState(data))\r\n\t\t\t.catch((err) => errorParse(err));\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className=\"app-container noise\">\r\n\t\t\t<header className=\"App-header \">\r\n\t\t\t\t<h1> Find, Look, Fun! </h1>\r\n\t\t\t\t<div className=\"search-container\">\r\n\t\t\t\t\t<SearchComp\r\n\t\t\t\t\t\tsetSearchResponseState={setSearchResponseState}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</header>\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t{appState ?\r\n\t\t\t\t\t<DiscoverComp\r\n\t\t\t\t\t\tmovieResults={appState.results}\r\n\t\t\t\t\t\tsearchResponseState={searchResponseState}\r\n\t\t\t\t\t/> : <LoadingComponent message={'Loading movies'} />}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('app')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}